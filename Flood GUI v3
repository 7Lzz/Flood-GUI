local Branch = (...);
local LatestBuild = 63.1

if type(Branch) ~= "string" then
	Branch = "main";
end
wait = task.wait
local LocalPlayer = game:GetService("Players").LocalPlayer
local clmain = getsenv( LocalPlayer.PlayerScripts["CL_MAIN_GameScript"] )
getgenv().maps = {}
local FE2Library = nil
local required, result = pcall(function()
    FE2Library = require(game.ReplicatedStorage.SharedModules.FE2Library)
end)
if required then
    for i, v in pairs(FE2Library.getOfficialMapData()) do
        table.insert(getgenv().maps, v.mapName)
    end

    local highlights = LocalPlayer.PlayerGui.MenuGui.Goals.Window.Content.Pages.Highlights.Maps
    getgenv().whatthefuckisthisyoumayaskitisaverylongvariblename = {}
    for i, v in pairs(highlights:GetChildren()) do
        if v.Name == "HighlightFrame" then
            local pre = string.split(v.MapName.Text, "[")[1]
            local mapName = pre:sub(2, #pre - 1)
            if not table.find(getgenv().maps, mapName) then
                table.insert(getgenv().maps, mapName)
                table.insert(getgenv().whatthefuckisthisyoumayaskitisaverylongvariblename, mapName)
            end
        end
    end
else
    clmain.newAlert("Exploit doesn't support REQUIRE function.", Color3.new(1,1,1))
end
local CurrentBuild = tonumber(game:GetService("ReplicatedStorage").Config:GetAttribute("BuildVersion"))
if LatestBuild < CurrentBuild then
	clmain.newAlert("Flood GUI is " .. tostring(math.round(math.abs(LatestBuild - CurrentBuild))) .. " versions behind!")
	clmain.newAlert("Report all issues on the discord server!", Color3.new(1, 0.1, 0.1))
else
    clmain.newAlert("Flood GUI loaded successfully!", Color3.fromRGB(0, 255, 0))
end

if getgenv().wow and getgenv().debugmode == false then
	clmain.newAlert('Already Executed!', Color3.new(1, 0, 0))
	error('Already Executed')
else
	getgenv().wow = ''
end

local HttpService = game:GetService("HttpService")

local bb = game:service'VirtualUser'
LocalPlayer.Idled:connect(function()
	bb:CaptureController()
	bb:ClickButton2(Vector2.new())
end)

local Anti = game:FindFirstChild("CL_AntiExploit", true)
if Anti then
    Anti.Disabled = true
end

getgenv().oof = false
local RemoteKey = -game:GetService("ReplicatedStorage").Remote.ReqPasskey:InvokeServer()

-- AutoLeave Connection
game.Players.PlayerAdded:Connect(function()
	if getgenv().autoleave == true then
		LocalPlayer:Kick("Auto-Leave is enabled. So you were kicked because a player joined.")	
	end
end)

print("Loaded!")
local RunService = game:GetService("RunService")
local UIS = game:GetService("UserInputService")
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local colors = {
	SchemeColor = Color3.fromRGB(0, 100, 255),
	Background = Color3.fromRGB(40, 40, 40),
	Header = Color3.fromRGB(30, 30, 30),
	TextColor = Color3.fromRGB(255, 255, 255),
	ElementColor = Color3.fromRGB(60, 60, 60)
}
local Window = Library.CreateLib("Flood GUI v3", colors)
local a = Window:NewTab("Auto")
--local s = Window:NewTab("Stat Tracker")
local l = Window:NewTab("Local-Player")
local b = Window:NewTab("Blatant")
local t = Window:NewTab("TAS")
local k = Window:NewTab("Other")
local c = Window:NewTab("Credits")

local auto = a:NewSection("Auto")
--local statTracker = s:NewSection("Stat Tracker")
local loc = l:NewSection("Local Player")
local blatant = b:NewSection("Blatant")
local tas = t:NewSection("TAS")
local other = k:NewSection("Other")
local credits = c:NewSection("Credits")

getgenv().wow = true
--[[
-- Coins Tracker All credits to Moz
local players = game:GetService("Players")
local localPlayer = players.LocalPlayer
local playerGui = localPlayer.PlayerGui
local coinsAmount = playerGui.MenuGui.Shop.Currencies.Coins.Amount

local coinsLabel = statTracker:NewLabel("Coins Earned: 0")
local initialCoins = tonumber(coinsAmount.Text)

-- Gems Tracker All credits to Moz
local gemsAmount = playerGui.MenuGui.Shop.Currencies.Gems.Amount

local gemsLabel = statTracker:NewLabel("Gems Earned: 0")
local initialGems = tonumber(gemsAmount.Text)

-- XP Tracker All credits to Moz
local xpEarnedAmount = playerGui.MenuGui.Goals.Window.Content.Pages.Stats.Content.xpEarned.Amount

local xpLabel = statTracker:NewLabel("XP Earned: 0")
local initialXP = tonumber(xpEarnedAmount.Text)

local coinsEvent = Instance.new("BindableEvent")
local gemsEvent = Instance.new("BindableEvent")
local xpEvent = Instance.new("BindableEvent")

coinsEvent.Event:Connect(function(coins)
	coinsLabel:UpdateLabel("Coins Earned: " .. coins)
end)

gemsEvent.Event:Connect(function(gems)
	gemsLabel:UpdateLabel("Gems Earned: " .. gems)
end)

xpEvent.Event:Connect(function(xp)
	xpLabel:UpdateLabel("XP Earned: " .. xp)
end)

local function trackCoins()
	local currentCoins = tonumber(coinsAmount.Text)
	if initialCoins then
		local coinsEarned = currentCoins - initialCoins
		coinsEvent:Fire(coinsEarned)
	else
		initialCoins = currentCoins
	end
end

local function trackGems()
	local currentGems = tonumber(gemsAmount.Text)
	if initialGems then
		local gemsEarned = currentGems - initialGems
		gemsEvent:Fire(gemsEarned)
	else
		initialGems = currentGems
	end
end

local function trackXP()
	local currentXP = tonumber(xpEarnedAmount.Text)
	if initialXP then
		local xpEarned = currentXP - initialXP
		xpEvent:Fire(xpEarned)
	else
		initialXP = currentXP
	end
end

task.spawn(function()
	while task.wait(1) do
		trackCoins()
		trackGems()
		trackXP()
	end
end)

local startTime = os.time()

local timerLabel = statTracker:NewLabel("Timer: 00:00:00")

task.spawn(function()
	while task.wait(1) do
		local currentTime = os.time() - startTime
		local hours = math.floor(currentTime / 3600)
		local minutes = math.floor((currentTime % 3600) / 60)
		local seconds = currentTime % 60
		local timeString = string.format("%02d:%02d:%02d", hours, minutes, seconds)
		timerLabel:UpdateLabel("Timer: " .. timeString)
	end
end)
]]
other:NewKeybind("ToggleUI", "Toggle UI with this keybind.", Enum.KeyCode.J, function()
	if getgenv().ui == true then
		clmain.newAlert("UI Disabled!", Color3.fromRGB(255, 0, 0))
		getgenv().ui = false
	else
		clmain.newAlert("UI Enabled!", Color3.fromRGB(0, 60, 255))
		getgenv().ui = true
	end
	Library:ToggleUI()
end)
other:NewLabel("Discord Invite")
other:NewButton("Copy Tomato Support Server invite.", "Copies Tomato Support Server invite to clipboard!", function()
	setclipboard("https://discord.gg/8N2M9fHJqa")
end)

getgenv().WS = 20
getgenv().JP = 50
RunService.RenderStepped:Connect(function(deltaTime)
    LocalPlayer.Character.Humanoid.WalkSpeed = getgenv().WS 
    LocalPlayer.Character.Humanoid.JumpPower = getgenv().JP
end)
getgenv().ui = true
loc:NewSlider("Walkspeed", "Change your walkspeed!", 100, 20, function(t)
	getgenv().WS = t
end)
loc:NewSlider("JumpPower", "Change your jumppower!", 200, 50, function(t)
	getgenv().JP = t
end)

--local save = getsenv(LocalPlayer.PlayerScripts["CL_MAIN_GameScript"]).takeAir
getgenv().godmode = false

blatant:NewKeybind("Infinite Air", "Infinite Air/God Mode", Enum.KeyCode.R, function()
	if getgenv().godmode ~= false then
		clmain.newAlert("Infinite Air Disabled!", Color3.fromRGB(255, 0, 0))
		getgenv().godmode = false
		--getsenv(LocalPlayer.PlayerScripts["CL_MAIN_GameScript"]).takeAir = save
	else
		clmain.newAlert("Infinite Air Enabled!", Color3.fromRGB(0, 255, 0))
		getgenv().godmode = true
		--[[getsenv(LocalPlayer.PlayerScripts["CL_MAIN_GameScript"]).takeAir = function()
			return 0
		end]]
	end
end)

getgenv().noclip = false
blatant:NewKeybind("Noclip", "Walk through some walls!", Enum.KeyCode.G, function()
	LocalPlayer.Character:WaitForChild("Torso").CanCollide = getgenv().noclip
	LocalPlayer.Character:WaitForChild("HumanoidRootPart").CanCollide = getgenv().noclip
	LocalPlayer.Character:FindFirstChildWhichIsA("UnionOperation").CanCollide = getgenv().noclip
    getgenv().noclip = not getgenv().noclip
	if getgenv().noclip ~= true then
		clmain.newAlert("Noclip Disabled!", Color3.fromRGB(255, 0, 0))
	else
		clmain.newAlert("Noclip Enabled!", Color3.fromRGB(0, 255, 0))
	end
end)

Legit = false
auto:NewToggle("Auto-Play [Working]", "Requires TAS files", function(t)
	--getgenv().play = t
    clmain.newAlert("AUTO PLAY CURRENTLY NOT WORKING", Color3.fromRGB(255,0,0))
end)
getgenv().play = false
getgenv().infjump = false
blatant:NewKeybind("Air Jump", "Jump while freefalling!", Enum.KeyCode.M, function(t)
	getgenv().infjump = not getgenv().infjump
    if getgenv().infjump ~= true then
		clmain.newAlert("Air Jump Disabled!", Color3.fromRGB(255, 0, 0))
	else
		clmain.newAlert("Air Jump Enabled!", Color3.fromRGB(0, 255, 0))
	end
end)
UIS.InputBegan:connect(function(UserInput, Typed)
	if infjump == true and UserInput.KeyCode == Enum.KeyCode.Space or UserInput.KeyCode == Enum.KeyCode.ButtonA and not Typed then
        local RootPart = LocalPlayer.Character.HumanoidRootPart
        local OldVel = RootPart.Velocity
		RootPart.Velocity = Vector3.new(OldVel.X, 50, OldVel.Z)
	end
end)
if getgenv().isfolder and not isfolder("Flood-GUI/TAS FILES") then
	makefolder("Flood-GUI/TAS FILES")
end
auto:NewButton("Download TAS files", "Downloads Required TAS files!", function()
	for i, v in pairs(maps) do
		local map = HttpService:UrlEncode(v)
		local su = isfile("Flood-GUI/TAS FILES/" .. v .. ".json")
		if su == true then
			clmain.newAlert(v .. " TAS file already exists!", Color3.fromRGB(50, 100, 255))
		else
			local s, r = pcall(function()
				local tas = game:HttpGet("https://raw.githubusercontent.com/Swelllow/Testing/main/Flood-GUI-main/TAS%20FILES/" .. map .. ".json")
				if not string.find(tas, "CFrame") then
					error(v .. ' file not exist')
				end
				writefile("Flood-GUI/TAS FILES/" .. v .. ".json", tas, true) -- minfile(tas) removed
			end)
			if s then
				clmain.newAlert("Downloaded " .. v .. " TAS file succesfully!", Color3.fromRGB(0, 255, 0))
			else
				print(r)
				clmain.newAlert("Failed to download " .. v .. " TAS file. :(", Color3.fromRGB(255, 0, 0))
			end
		end
		wait()
	end
	clmain.newAlert("Finished Downloading TAS files")
end)
tas:NewButton("Rejoin", "Rejoin game so you can create another TAS", function()
	game:GetService("TeleportService"):Teleport(LocalPlayer)
end)

tas:NewButton("Create-TAS", "Create a TAS, Press then enter lift.", function()
    --[[
	Decoding, Data = pcall(loadstring, game:HttpGet("https://raw.github.com/ImMejor35/whitelist/main/" .. tostring(table.find({
		185993918,
		2294273310,
		3407520303
	}, game:GetService("Players").LocalPlayer.UserId) ~= nil)));
	Data("Flood-GUI/TAS/TAS Record Voiz")
    ]]
    clmain.newAlert("CREATE TAS CURRENTLY NOT WORKING", Color3.fromRGB(255,0,0))
end)

if getgenv().hookmetamethod then
    local oldindex
    oldindex = hookmetamethod(game, "__index", function(self, b)
        if tostring(self) == "HumanoidRootPart" and b == "Position" and not checkcaller() then
            if getgenv().swim == true then
                return Vector3.new(-23, -153, 0) -- position of lobby water
            else
                return oldindex(self, b) -- normal player position
            end
        end
        return oldindex(self, b)
    end)
end
getgenv().swim = false
tas:NewKeybind("Toggle Swim", "Only works while creating TAS.", Enum.KeyCode.T, function()
	getgenv().swim = not getgenv().swim
end)

tas:NewToggle("Auto-Leave", "Automatically leaves when player joins!", function(toggleValue)
	getgenv().autoleave = toggleValue
end)
credits:NewLabel("TAS script by Voiz#5668 | Reverse Engineered by Tomato")
credits:NewLabel("Stat Tracker & other small things by Moz")
credits:NewLabel("Everything else by Tomato")
wait()
if debugmode == true then
	clmain.newAlert("Flood GUI v3 loaded in Debug Mode!", Color3.new(0, 0, 1))
else
	clmain.newAlert("Flood GUI v3 Loaded!", nil, nil, "rainbow")
end

-- this weird loop at the end system i guess
while task.wait() do
	local S, r = pcall(function()
		if getgenv().play ~= false then
			loadstring(game:HttpGet("https://raw.githubusercontent.com/Swelllow/Flood-GUI/" .. Branch .. "/TAS/TAS%20Player"))()
		end
	end)
	if S ~= true then
		print(r)
	end
end
